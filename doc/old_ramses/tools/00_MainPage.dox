//  -------------------------------------------------------------------------
//  Copyright (C) 2016 BMW Car IT GmbH
//  -------------------------------------------------------------------------
//  This Source Code Form is subject to the terms of the Mozilla Public
//  License, v. 2.0. If a copy of the MPL was not distributed with this
//  file, You can obtain one at https://mozilla.org/MPL/2.0/.
//  -------------------------------------------------------------------------

/**
@page ToolsAndDebugging Profiling, debugging, and tools

Ramses provides logs and various tools to help find issues in your application.
In the sections below you will find hints where to find those and how to use them.

# Debugging your scene

The easiest way to find problems in your content/scene is to use the validation layer of the
Ramses client. The validation is an optional layer of Ramses which shows hints of possible
undefined behavior, performance problems, or missing data which can cause your content to render
not as expected. This is similar to how Vulkan works - you can enable the validation to find issues,
and disable it for production to save resources.

Each ramses::StatusObject derived class has a validate() method. Call it to find issues in that object.
You can do this for an entire scene by calling validate() on a ramses::Scene, ramses::RamsesRenderer or any
other object. Validation works recursively, i.e. a RamsesClient will validate all its scenes, a ramses::Scene will
validate all its scene objects, and so on.

# Profiling and performance

For a detailed overview of the various ways to profile your content and optimize performance, refer to the @ref Profiling
section.

# Scene viewer

Ramses scenes can be stored to a file @ref ramses::Scene::saveToFile().
These scene files can be viewed and inspected by the @ref SceneViewer.

# Logging

Ramses uses DLT to publish logs. See @ref DltIntroduction for an overview of DLT in general, and @ref UsingDLT for
details on usage of DLT in the Ramses context.

 */
