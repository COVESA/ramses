24.0.1
-------------------
        General changes
        ------------------------------------------------------------------------
        - Switch freetype to open files itself instead of from memory
        - added imgui open source library
        - Added Abseil open source library

         API changes
         ------------------------------------------------------------------------
        - Added IFontInstance::getAllSupportedCharacters that returns a set with all supported UTF32 char codes
        - RendererConfig changes
            - Rename setWaylandSocketEmbedded -> setWaylandEmbeddedCompositingSocketName
            - Rename setWaylandSocketEmbeddedGroup -> setWaylandEmbeddedCompositingSocketGroup
            - Rename setWaylandSocketEmbeddedFD -> setWaylandEmbeddedCompositingSocketFD
            - Add getWaylandEmbeddedCompositingSocketName
        - Remove partial applying of scene flush
            - Remove parameter limitForSceneActionsApply from RamsesRenderer::setFrameTimerLimits
        - IDcsmConsumerEventHandler: moved TechnicalDescription from contentReady to new contentDescription callback, which is issued before contentReady
        - DcsmRenderer changes
            - Renamed all *DcsmRenderer* symbols and files to *DcsmContentControl*
                - It does not wrap or replace RamsesRenderer as the old name suggests, instead it is alternative to RendererSceneControl
            - Added mandatory argument to DcsmContentControl::setDisplayBufferClearColor to specify display ID in addition to display buffer ID
            - Removed custom renderer event handling from DcsmContentControl::update
                - DcsmContentControl is now acting as alternative to RendererSceneControl, it does not replace or wrap RamsesRenderer, it lives alongside with it
                - How to port your code if you were using custom renderer event handler in DcsmContentControl::update
                    - dispatch the renderer events via RamsesRenderer::dispatchEvents instead, no need to change anything in the handler implementation
                - Side effect of this change that could cause problems: if you in your code do not properly flush renderer commands using RamsesRenderer::flush(),
                these commands will not be executed, this was not an issue previously due to internal DcsmContentControl logic (arguably wrongly)
                flushing the RamsesRenderer implicitly
            - Added missing event callbacks to IDcsmContentControlEventHandler: contentFlushed, contentExpired, contentRecoveredFromExpiration
                - These were previously available only in IRendererSceneControlEventHandler (scene events)
                and their DcsmContentControl version (content events) were missing
            - Removed redundant event callbacks IDcsmContentControlEventHandler::contentHidden and IDcsmContentControlEventHandler::contentReleased
                - contentHidden is equivalent to contentReady, in sense that content state dropped to state ready
                - contentReleased is equivalent to contentAvailable, in sense that content state dropped to state available
        - Add RamsesFrameworkConfig::disableDLTApplicationRegistrationg
        - Add Scene::getRamsesClient to retrieve parent client of a scene
        - Added new API to control scene states on renderer RendererSceneControl to replace deprecated RendererSceneControl_legacy API
            - the main difference is simplified scene state management and automatic transition to target state
            - typical use case when simply getting scene rendered:
                - api.setSceneMapping(scene, display);              // regardless of whether scene already published or not
                - api.setSceneState(RendererSceneState::Rendered);  // regardless of whether scene already published or not
                - api.flush();
                - ... sceneStateChanged(scene, RendererSceneState::Rendered) will be emitted when rendered state reached
            - how to port old code:
                - generally any state transition previously needing strict step by step approach can now be done in a single command
                    - subscribe + waitForSubscription, map + waitForMapped, show + waitForShown  ->  setState(rendered) + waitForRendered
                - step by step transitions can still be achieved with new API if needed (e.g. for controlling timing of scene appearance)
        - Split legacy scene control API from RamsesRenderer (this API is now deprecated, use RendererSceneControl instead)
            - the methods below were moved from RamsesRenderer to a new class RendererSceneControl_legacy:
                - subscribeScene, unsubscribeScene, mapScene, unmapScene, showScene, hideScene, assignSceneToDisplayBuffer,
                  setDisplayBufferClearColor, linkData, linkOffscreenBufferToSceneData, unlinkData
            - RendererSceneControl_legacy can be obtained via RamsesRenderer::getSceneControlAPI_legacy, there is just one instance per RamsesRenderer
            - RendererSceneControl_legacy has its own flush and dispatchEvents, RamsesRenderer::flush/dispatchEvents has no effect for the new API
            - how to port old code:
                - renderer->mapScene -> renderer->getSceneControlAPI_legacy()->mapScene (same for any method from above)
                - any call on RendererSceneControl_legacy must be additionally submitted by calling RendererSceneControl_legacy::flush
                - events have to be dispatched additionally via RendererSceneControl_legacy::dispatchEvents using IRendererSceneControlEventHandler_legacy
                - split your implementation of IRendererEventHandler accordingly
                  or let your implementation derive from both IRendererEventHandler and the new IRendererSceneControlEventHandler_legacy
        - DcsmRenderer can only be instantiated using RamsesRenderer::createDcsmRenderer
        - There can be only one API for scene/content control at a time, either RendererSceneControl, RendererSceneControl_legacy or DcsmRenderer
        - Add FontCascade to ramses-text-api
        - dataConsumerId_t, dataProviderId_t are now strongly typed value
        - Remove DisplayConfig::enableStereoDisplay: stereo rendering can be fully set up using existing ramses featuers
        - Remove DisplayConfig::setOffscreen
        - Added scene referencing feature, which allows to remotely control rendering states of other scenes
            - Added SceneReference and Scene::createSceneReference to obtain a Ramses object referring to a another scene
            - Added Scene::linkData/unlinkData functions which allow to create/destroy data links between master and referenced scenes
            - Added IClientEventHandler methods for callbacks related to scene referencing and their data linking
        - linkData and linkOffscreenBuffer in all currently available APIs (RendererSceneControl, DcsmRenderer, Scene, RendererSceneControl_legacy)
          do not fail anymore if consumer slot already linked to a provider, instead the link is updated to link to the new provider, discarding the previous link.

        Bugfixes
        ------------------------------------------------------------------------
        - Improve handling of empty CMAKE_RUNTIME_OUTPUT_DIRECTORY or CMAKE_LIBRARY_OUTPUT_DIRECTORY
