26.0.6
-------------------
        General changes
        ------------------------------------------------------------------------
        - ramses-stream-viewer does not connect to network anymore

        Bug fixes
        ------------------------------------------------------------------------
        - fix resource lifecycle issues after renaming or multiple creation of same resource
        - fix potential SomeIP connection logic reconnect loop

26.0.5
-------------------
        Bugfixes
        ------------------------------------------------------------------------
        - Fix possible crash in AnimationSystem

26.0.4
-------------------
        General changes
        ------------------------------------------------------------------------
        - Flip ramses-stream-viewer stream rendering vertically. Add --flip-y argument to restore old behavior.

        Bugfixes
        ------------------------------------------------------------------------
        - Fix someip keepalive handling after disconnect and following connect
        - Check and enforce DcsmMetadataCreator::setPreviewImagePng size limitations to ensure it can be transferred

        API changes
        ------------------------------------------------------------------------
        - Add ramses::GetRamsesVersion to query version information

26.0.3
-------------------
        Bugfixes
        ------------------------------------------------------------------------
        - Embedded compositor resets Red/Blue swizzle state on switch between different buffer types
        - Restore thread names on integrity

        API changes
        ------------------------------------------------------------------------
        - Add RendererConfig::setWaylandEmbeddedCompositingSocketPermissions to set embedded compositor socket permissions on creation

26.0.2
-------------------
        Build system
        ------------------------------------------------------------------------
        - Add option to disable building of tools (ramses-sdk_BUILD_TOOLS). Set to OFF to reduce build time if tools not needed

26.0.0
-------------------
        API changes
        ------------------------------------------------------------------------
        - EEffectInputDataType now differentiates between EEffectInputDataType_TextureSampler2D, EEffectInputDataType_TextureSampler3D and EEffectInputDataType_TextureSamplerCube
          instead of EEffectInputDataType_TextureSampler
        - Removed deprecated RendererSceneControl API (RendererSceneControl_legacy).
        - Added RamsesUtils::SaveImageBufferToPng with additional flag "flipImageBufferVertically".
        - SceneObjects now have a unique (within one Scene) and persistent sceneObjectId_t.
        - Added Scene::findObjectById which can be used to find SceneObjects within one Scene.
        - Added support for missing blending factors supported in OpenGL ES 3.0:
            - Added following value to enum EBlendFactor: EBlendFactor_SrcColor, EBlendFactor_OneMinusSrcColor, EBlendFactor_DstColor, EBlendFactor_OneMinusDstColor,
              EBlendFactor_ConstColor, EBlendFactor_OneMinusConstColor, EBlendFactor_ConstAlpha, EBlendFactor_OneMinusConstAlpha, EBlendFactor_AlphaSaturate
        - Add Appearance::setBlendingColor to support setting blending color constant
        - Added new event callbacks informing about expiration monitoring enable/disable, see docs for details
            - IRendererSceneControlEventHandler::sceneExpirationMonitoringEnabled, IRendererSceneControlEventHandler::sceneExpirationMonitoringDisabled
            - IDcsmContentControlEventHandler::contentExpirationMonitoringEnabled, IDcsmContentControlEventHandler::contentExpirationMonitoringDisabled
        - Extended DCSM to offer Wayland IVI Surface ids as new content type next to Ramses scenes
        - All usages of Wayland IVI Surface ids on the API (incl. StreamTexture and DisplayConfig) use now the same type "waylandIviSurfaceId_t"
        - Use strongly typed value for Wayland IVI Layer Id
        - Add support for Geometry shaders
            - Added EffectDescription::setGeometryShader and EffectDescription::setGeometryShaderFromFile to specify geometry shader
        - New resource API
            - RamsesClient based resources become SceneObjects, resource creation, destruction and ownership move to Scene
            - New ArrayResource class, replaces UIntxxArray, FloatArray and VectorxFArray classes
            - New ArrayBuffer class, replaces IndexBufferObject and VertexBufferObject
            - Scene::createArrayBuffer has data type as first argument and size is given in number of elements instead of bytes!
            - ArrayBuffer::updateData replaces old Vertex/IndexBufferData::setData, takes offset and size as element index instead of bytes!
            - ArrayBuffer: getData and both buffer size getters all based on numbers of elements instead of number of bytes!
            - Scene::createTexture2D/3D/Cube have texture format as first argument, this is to make resource creation APIs consistent
            - Scene::createTexture2DBuffer has texture format as first argument and mipCount last, this is to make resource creation APIs consistent
            - Texture2DBuffer::updateData replaces old Texture2DBuffer::setData, reordered arguments make resource APIs consistent
            - ETextureFormat and EDataType are enum classes, no implicit conversion to/from integer possible
            - Scene file saving moved to Scene and now saves only one scene file, which also includes resources
            - Removed all loadResources/saveResources functions from RamsesClient and removed ResourceFileDescription classes
            - Added ResourceDataPool to be compatible to legacy ramses behavior: scene independent resource and resource file usage (deprecated)
            - In RamsesClient replaced findObjectByName by findSceneByName, add getScene function
        - Data objects can be bound to camera frustum planes, this allows 1 to N data distribution and also data linking of camera frustum planes
          (indirectly also field of view and aspect ratio), see docs for details:
            - LocalCamera::bindFrustumPlanes, LocalCamera::unbindFrustumPlanes, LocalCamera::isFrustumPlanesBound and RamsesUtils::SetPerspectiveCameraFrustumToDataObjects

25.0.6
-------------------
        Bugfixes
        ------------------------------------------------------------------------
        - Fix possible crash when using EVisibilityMode::Off
        - Fix oss build with vanilla abseil on MSVC

        Documentation
        ------------------------------------------------------------------------
        - Published doxygen API docs at https://genivi.github.io/ramses (currently showing
            only the RAMSES version released latest)

25.0.5
-------------------
        Bugfixes
        ------------------------------------------------------------------------
        - Embedded compositor supports older versions (version 1 and version 2) of wl_output protocol

25.0.4
-------------------
        General changes
        ------------------------------------------------------------------------
        - Embedded Compositor supports wl_output interface
            - Always reports Zero for physical width, physical height and refresh
            - Always reports One for scale factor
        - SceneReference's master scene can be changed by destroying the SceneReference in its original master scene
          and creating a new SceneReference referencing same scene ID in another master scene

        API changes
        ------------------------------------------------------------------------
        - Add DCSM metadata streamID

25.0.2
-------------------
        API changes
        ------------------------------------------------------------------------
        - SceneReference::requestNotificationsForSceneVersionTags will trigger sending of last valid version tag applied
          on the referenced scene

25.0.1
-------------------
        General changes
        ------------------------------------------------------------------------
        - Embedded Compositor supports Linux DMA buffers interface

        Bugfixes
        ------------------------------------------------------------------------
        - Fix failure to connect to wayland display upon conflict between display config and related environment variables

        API changes
        ------------------------------------------------------------------------
        - Added DcsmContentControl::addContentCategory and removeContentCategory for being able to add categories during
          runtime. Added as static method for binary compatibility. Will be switched to normalized
          API on next major version
        - Added RamsesUtils::SaveImageBufferToPng

25.0.0
-------------------
        API changes
        ------------------------------------------------------------------------
        - Remove AnimatedSetter
        - Rework API class constructors: Make explicit and/or remove misleading default arguments
        - RamsesRenderer::createDcsmContentControl will fail if given DcsmContentControlConfig has no DCSM category
        - Removed DcsmContentControl::setDisplayBufferClearColor, RendererSceneControl::setDisplayBufferClearColor
          and added RamsesRenderer::setDisplayBufferClearColor instead
            - behavior and arguments unchanged
        - Added DcsmContentControl::unlinkData to break data link between consumer and provider
        - Removed RamsesRenderer::handlePickEvent and IRendererEventHandler::objectsPicked and addded
          RendererSceneControl::handlePickEvent and IRendererSceneControlEventHandler::objectsPicked instead
            - behavior and arguments unchanged
        - Added DcsmContentControl::handlePickEvent and IDcsmContentControlEventHandler::objectsPicked
        - Added event callbacks for data provider/consumer creation/destruction
          to both IRendererSceneControlEventHandler and IDcsmContentControlEventHandler
            - dataProviderCreated, dataProviderDestroyed, dataConsumerCreated, dataConsumerDestroyed
        - Dcsm metadata for 3d vehicle now also takes camera FOV, see struct CarModelViewMetadata
        - Animation timing must be set together with Dcsm metadata for 3d vehicle via DcsmMetadataCreator::setCarModelView
            - animation timing can be retrieved using DcsmMetadataUpdate::getCarModelViewAnimationInfo()
        - Make RamsesFrameWork::createClient/destroyClient/createRenderer/destroyRenderer fail when connected
        - DcsmProvider callbacks give CategoryInfo instead of SizeInfo. This object can be queried for multiple sets of values
        - Removed DcsmProvider::requestContentFocus and callbacks in IDcsmConsumerEventHandler and IDcsmContentControlEventHandler in favour of enableContentFocusRequest
        - Removed FocusRequest from DcsmMetadata in DcsmMetadataCreator and DcsmMetadataUpdate
        - Added parameter "displayBuffer" to RamsesRenderer::readPixels to allow reading from offscreen buffers
            -  Added parameter "displayBuffer" to IRendererEventHandler::framebufferPixelsRead that corresponds to
            the buffer for which read pixels event was generted
        - Added RenderSize and SafeArea to CategoryInfo

        General changes
        ------------------------------------------------------------------------
        - Change display default XY position to (0,0) instead of (150,150)
            - Leads to change of placement of created display window on Windows and X11 platforms if default values are used
        - LZ4 compress compressed texture formats like ASTC for file or network

        Bugfixes
        ------------------------------------------------------------------------
        - Set ivi surface destination rectangle on display creation on Wayland IVI platform

24.0.3
-------------------
        General changes
        ------------------------------------------------------------------------
        - Added DcsmContentControlEventHandlerEmpty for convenience when only subset of handlers need implementation
        - Remove usage of capu library
        - Unbreak windows OSS abseil build due to incompatible flags
        - Update glslang 8.13.3743

        Bugfixes
        ------------------------------------------------------------------------
        - Make File tests more stable when shuffled
        - Properly handle shift key in windows console input

        API changes
        ------------------------------------------------------------------------
        - New FocusRequest handling:
          - Added DCSMProvider::enableFocusRequest and disableFocusRequest
          - Added IDcsmConsumerEventHandler and IDcsmContentControlEventHandler callbacks
              contentEnableFocusRequest and contentDisableFocusRequest if compiled with ENABLE_NEW_FOCUSREQUEST_API defined
          This allows backwards compatible integration on ramses 24.x versions. For future major version this will be integrated
          as usual.

24.0.1
-------------------
        General changes
        ------------------------------------------------------------------------
        - Switch freetype to open files itself instead of from memory
        - added imgui open source library
        - Added Abseil open source library

         API changes
         ------------------------------------------------------------------------
        - Added IFontInstance::getAllSupportedCharacters that returns a set with all supported UTF32 char codes
        - RendererConfig changes
            - Rename setWaylandSocketEmbedded -> setWaylandEmbeddedCompositingSocketName
            - Rename setWaylandSocketEmbeddedGroup -> setWaylandEmbeddedCompositingSocketGroup
            - Rename setWaylandSocketEmbeddedFD -> setWaylandEmbeddedCompositingSocketFD
            - Add getWaylandEmbeddedCompositingSocketName
        - Remove partial applying of scene flush
            - Remove parameter limitForSceneActionsApply from RamsesRenderer::setFrameTimerLimits
        - IDcsmConsumerEventHandler: moved TechnicalDescription from contentReady to new contentDescription callback, which is issued before contentReady
        - DcsmRenderer changes
            - Renamed all *DcsmRenderer* symbols and files to *DcsmContentControl*
                - It does not wrap or replace RamsesRenderer as the old name suggests, instead it is alternative to RendererSceneControl
            - Added mandatory argument to DcsmContentControl::setDisplayBufferClearColor to specify display ID in addition to display buffer ID
            - Removed custom renderer event handling from DcsmContentControl::update
                - DcsmContentControl is now acting as alternative to RendererSceneControl, it does not replace or wrap RamsesRenderer, it lives alongside with it
                - How to port your code if you were using custom renderer event handler in DcsmContentControl::update
                    - dispatch the renderer events via RamsesRenderer::dispatchEvents instead, no need to change anything in the handler implementation
                - Side effect of this change that could cause problems: if you in your code do not properly flush renderer commands using RamsesRenderer::flush(),
                these commands will not be executed, this was not an issue previously due to internal DcsmContentControl logic (arguably wrongly)
                flushing the RamsesRenderer implicitly
            - Added missing event callbacks to IDcsmContentControlEventHandler: contentFlushed, contentExpired, contentRecoveredFromExpiration
                - These were previously available only in IRendererSceneControlEventHandler (scene events)
                and their DcsmContentControl version (content events) were missing
            - Removed redundant event callbacks IDcsmContentControlEventHandler::contentHidden and IDcsmContentControlEventHandler::contentReleased
                - contentHidden is equivalent to contentReady, in sense that content state dropped to state ready
                - contentReleased is equivalent to contentAvailable, in sense that content state dropped to state available
        - Add RamsesFrameworkConfig::disableDLTApplicationRegistrationg
        - Add Scene::getRamsesClient to retrieve parent client of a scene
        - Added new API to control scene states on renderer RendererSceneControl to replace deprecated RendererSceneControl_legacy API
            - the main difference is simplified scene state management and automatic transition to target state
            - typical use case when simply getting scene rendered:
                - api.setSceneMapping(scene, display);              // regardless of whether scene already published or not
                - api.setSceneState(RendererSceneState::Rendered);  // regardless of whether scene already published or not
                - api.flush();
                - ... sceneStateChanged(scene, RendererSceneState::Rendered) will be emitted when rendered state reached
            - how to port old code:
                - generally any state transition previously needing strict step by step approach can now be done in a single command
                    - subscribe + waitForSubscription, map + waitForMapped, show + waitForShown  ->  setState(rendered) + waitForRendered
                - step by step transitions can still be achieved with new API if needed (e.g. for controlling timing of scene appearance)
        - Split legacy scene control API from RamsesRenderer (this API is now deprecated, use RendererSceneControl instead)
            - the methods below were moved from RamsesRenderer to a new class RendererSceneControl_legacy:
                - subscribeScene, unsubscribeScene, mapScene, unmapScene, showScene, hideScene, assignSceneToDisplayBuffer,
                  setDisplayBufferClearColor, linkData, linkOffscreenBufferToSceneData, unlinkData
            - RendererSceneControl_legacy can be obtained via RamsesRenderer::getSceneControlAPI_legacy, there is just one instance per RamsesRenderer
            - RendererSceneControl_legacy has its own flush and dispatchEvents, RamsesRenderer::flush/dispatchEvents has no effect for the new API
            - how to port old code:
                - renderer->mapScene -> renderer->getSceneControlAPI_legacy()->mapScene (same for any method from above)
                - any call on RendererSceneControl_legacy must be additionally submitted by calling RendererSceneControl_legacy::flush
                - events have to be dispatched additionally via RendererSceneControl_legacy::dispatchEvents using IRendererSceneControlEventHandler_legacy
                - split your implementation of IRendererEventHandler accordingly
                  or let your implementation derive from both IRendererEventHandler and the new IRendererSceneControlEventHandler_legacy
        - DcsmRenderer can only be instantiated using RamsesRenderer::createDcsmRenderer
        - There can be only one API for scene/content control at a time, either RendererSceneControl, RendererSceneControl_legacy or DcsmRenderer
        - Add FontCascade to ramses-text-api
        - dataConsumerId_t, dataProviderId_t are now strongly typed value
        - Remove DisplayConfig::enableStereoDisplay: stereo rendering can be fully set up using existing ramses featuers
        - Remove DisplayConfig::setOffscreen
        - Added scene referencing feature, which allows to remotely control rendering states of other scenes
            - Added SceneReference and Scene::createSceneReference to obtain a Ramses object referring to a another scene
            - Added Scene::linkData/unlinkData functions which allow to create/destroy data links between master and referenced scenes
            - Added IClientEventHandler methods for callbacks related to scene referencing and their data linking
        - linkData and linkOffscreenBuffer in all currently available APIs (RendererSceneControl, DcsmRenderer, Scene, RendererSceneControl_legacy)
          do not fail anymore if consumer slot already linked to a provider, instead the link is updated to link to the new provider, discarding the previous link.

        Bugfixes
        ------------------------------------------------------------------------
        - Improve handling of empty CMAKE_RUNTIME_OUTPUT_DIRECTORY or CMAKE_LIBRARY_OUTPUT_DIRECTORY
