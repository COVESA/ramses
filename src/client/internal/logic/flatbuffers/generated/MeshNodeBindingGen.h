// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MESHNODEBINDING_RLOGIC_SERIALIZATION_H_
#define FLATBUFFERS_GENERATED_MESHNODEBINDING_RLOGIC_SERIALIZATION_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 9,
             "Non-compatible flatbuffers version included");

#include "RamsesBindingGen.h"

namespace rlogic_serialization {

struct MeshNodeBinding;
struct MeshNodeBindingBuilder;

inline const ::flatbuffers::TypeTable *MeshNodeBindingTypeTable();

struct MeshNodeBinding FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef MeshNodeBindingBuilder Builder;
  struct Traits;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return MeshNodeBindingTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_BASE = 4
  };
  const rlogic_serialization::RamsesBinding *base() const {
    return GetPointer<const rlogic_serialization::RamsesBinding *>(VT_BASE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_BASE) &&
           verifier.VerifyTable(base()) &&
           verifier.EndTable();
  }
};

struct MeshNodeBindingBuilder {
  typedef MeshNodeBinding Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_base(::flatbuffers::Offset<rlogic_serialization::RamsesBinding> base) {
    fbb_.AddOffset(MeshNodeBinding::VT_BASE, base);
  }
  explicit MeshNodeBindingBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<MeshNodeBinding> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<MeshNodeBinding>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<MeshNodeBinding> CreateMeshNodeBinding(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<rlogic_serialization::RamsesBinding> base = 0) {
  MeshNodeBindingBuilder builder_(_fbb);
  builder_.add_base(base);
  return builder_.Finish();
}

struct MeshNodeBinding::Traits {
  using type = MeshNodeBinding;
  static auto constexpr Create = CreateMeshNodeBinding;
};

inline const ::flatbuffers::TypeTable *MeshNodeBindingTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_SEQUENCE, 0, 0 }
  };
  static const ::flatbuffers::TypeFunction type_refs[] = {
    rlogic_serialization::RamsesBindingTypeTable
  };
  static const char * const names[] = {
    "base"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 1, type_codes, type_refs, nullptr, nullptr, names
  };
  return &tt;
}

}  // namespace rlogic_serialization

#endif  // FLATBUFFERS_GENERATED_MESHNODEBINDING_RLOGIC_SERIALIZATION_H_
